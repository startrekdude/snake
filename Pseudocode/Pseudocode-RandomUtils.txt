A utility class for doing common operations related to random numbers
Partially inspired by Python's random module
Currently has methods that:
    - Return whether a "1 in X" chance happened
    - Return a random Boolean
    - Return a random number in range
    - Pick a random entry from a list

Method range
Name: Sam Haskins
Date: 11/18/2018
Inputs: Minimum and maximum bounds defining a range
Outputs: A random number in that range, inclusive on both bounds
Description:
    Inspired by Python's randint()
    Returns a random number within a specified range
    Throws IllegalArgumentException is min > max
Begin
    If min is greater than max:
        Throw a IllegalArgumentException
    
    // Create a random number in the desired range
    Return min +
                (the result of Math->random times
                    ((max minus min) plus one))
End

Method choice
Name: Sam Haskins
Date: 10/18/2018
Generics: The type of List, T
Inputs: A List<T> to pick an item from
Outputs: A random item from the list
Description:
    Picks a random index from 0 - list->size() - 1
    and returns the item at that index
Begin
    Return list->get with (range with 0 and (list->size - 1))
End

Method chance
Name: Sam Haskins
Date: 10/17/2018
Inputs: The X in "1-in-X chance"
Outputs: Whether that chance succeeds
Description:
    Simulates a 1-in-X chance, returns a Boolean if it passes
Begin
    Return whether the result of range with 1 and chance is equal to chance
End

Method bool
Name: Sam Haskins
Date: 10/17/2018
Inputs: None
Outputs: Returns a random true or false value
Description:
    Returns a random Boolean using RandomUtils->chance with 2
Begin
    Return the result of chance with 2
End