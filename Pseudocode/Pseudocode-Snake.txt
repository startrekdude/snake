An object representing a Snake game
It keeps track of the snake's direction and tail, and the overall board state
It provides methods to:
    - Set the direction, rejecting 180-degree turns
    - Advance the game
    - Get the next snake move
Uses a LinkedList to represent the Snake

// The board; cells are empty, tail, or apple
public SnakeCell[][] board

// The snake's tail
public LinkedList of SnakeMove tail

// The current direction the snake is moving in
private Direction direction

Constructor
Name: Sam Haskins
Date: 12/7/2018
Inputs: None
Outputs: Creates a new Snake game with an 18x18 board, a size 2 snake, and an apple
Description:
    Initializes a Snake object with an 18x18 board, a small size 2 snake, and an
    apple at position (9, 9)
Begin
    Let board be a new SnakeCell[18][18]
    
    // Most of the board should be empty
    For every index 0 to 17 (i):
        For every index 0 to 17 (j):
            Let board[i][j] be SnakeCell->Empty
    
    // Add the apple and the snake
    Let board[9][9] be SnakeCell->Apple
    Let board[9][1] be SnakeCell->Tail
    Let board[9][2] be SnakeCell->Tail
    
    // Add the Snake's head and tail
    Let tail be a new LinkedList of SnakeMove
    Invoke tail->add with a new SnakeMove with (9, 1, and Direction->Right)
    Invoke tail->add with a new SnakeMove with (9, 2, and Direction->Right)
    
    // Set the direction; snake goes right by default
    Let direction be Direction->Right
End

Method setDirection
Name: Sam Haskins
Date: 12/7/2018
Inputs: The new direction for the Snake
Outputs: Sets the Snake's direction, unless it is opposite the snake's head's direction
Description:
    Sets the Snake's direction to the provided value,
    unless it is opposite the Snake's current direction.
    Ex: setDirection(Direction.RIGHT) will do nothing if tail.getLast().direction = Direction.LEFT
Begin
    // Get the last direction the snake moved in
    Let lastDirection, a Direction, be tail->getLast->direction
    
    If newDirection is equal to Direction->Left and lastDirection is not equal to Direction->Right:
        Let direction be newDirection
        Return true
    Otherwise, If newDirection is equal to Direction->Right and lastDirection is not equal to Direction->Left:
        Let direction be newDirection
        Return true
    Otherwise, If newDirection is equal to Direction->Up and lastDirection is not equal to Direction->Down:
        Let direction be newDirection
        Return true
    Otherwise, If newDirection is equal to Direction->Down and lastDirection is not equal to Direction->Up:
        Let direction be newDirection
        Return true
    // We couldn't set the direction; return false to indicate this
    Return false
End

Method advanceGame
Name: Sam Haskins
Date: 12/7/2018
Inputs: None, uses Snake's direction
Outputs: Returns whether the game can continue; updates board and tail
Description:
    Evaluates Snake's rules against the current state and returns whether
    the game can continue. The game cannot continue if:
        - The move would collide with the Snake's tail
        - The move would exit the board
        - After moving, all cells all filled with the tail
Begin
    // Get the next move
    Let move, a SnakeMove, be getNextMove
    
    // If the move is off the board, the game ends
    If move->row is greater than 17 or move->row is less than 0 or
       move->column is greater than 17 or move->column is less than 0:
       Return SnakeMoveResult->Died
    
    // If the move collides with the tail, the game ends
    // UNLESS it's the last tail, in which case we can continue
    Let cell, a SnakeCell, be board[move->row][move->column]
    Let lastTail, a SnakeMove, be tail->getFirst
    
    If cell is equal to SnakeCell->Tail and
    (move->row is not equal to lastTail->row or move->column is not equal to lastTail->column):
        Return SnakeMoveResult->Died
    
    // Make the move
    Invoke tail->add with move
    Let board[move->row][move->column] be SnakeCell->Tail
    
    // Does the tail fill the entire board? (18x18)
    If tail->size is equal to 324:
        Return SnakeMoveResult->Died
    
    // If the snake ate an apple, make a new one
    If cell is equal to SnakeCell->Apple:
        Invoke placeApple
        Return SnakeMoveResult->AteApple
    Otherwise:
        // Simulate growth when eating an apple by not removing a cell
        Invoke tail->remove with lastTail
        Let board[lastTail->row][lastTail->column] be SnakeCell->Empty
        Return SnakeMoveResult->NoResult
End

Method placeApple
Name: Sam Haskins
Date: 12/7/2018
Inputs: None
Outputs: Randomly places a SnakeCell->Apple on an empty part of the board
Description:
    Randomly selects an empty spot of the board, and places an Apple at that spot
    Does not return if the snake fills the entire board
Begin
    Declare row, an int
    Declare column, an int
    
    // Pick an *empty* snake cell, randomly
    // This will go into an infinite loop if the snake fills the entire board,
    // caller should check if tail->size is 18*18
    Do
        Let row be RandomUtils->range with 0 and 17
        Let column be RandomUtils->range with 0 and 17
    While board[row][column] is not equal to SnakeCell->Empty
    
    // Place the apple
    Let board[row][column] be SnakeCell->Apple
End

Method getNextMove
Name: Sam Haskins
Date: 12/7/2018
Inputs: None, uses the Snake's tail and direction fields
Outputs: Returns the next move that would be performed by the snake
Description:
    Determines the next SnakeMove based on the position of the head
    and the direction of motion; returns this SnakeMove
Begin
    // First, find the current position of the head
    Let head, a SnakeMove, be tail->getLast
    
    // Determine new row and column figures, using the current direction
    // Start from the current position
    Let row, an int, be head->row
    Let column, an int, be head->column
    
    // Move as specified from the direction
    If direction is equal to Direction->Right:
        Increment column
    Otherwise, If direction is equal to Direction->Left:
        Decrement column
    Otherwise, If direction is equal to Direction->Up:
        Decrement row
    Otherwise, If direction is equal to Direction->Down:
        Increment row
    
    // Create and return the SnakeMove using the direction
    Return a new SnakeMove with row, column, and direction
End